{"version":3,"sources":["Utils/Utils.js","App.js","index.js"],"names":["getMixedStream","streams","audioContext","AudioContext","destination","createMediaStreamDestination","forEach","stream","createMediaStreamSource","connect","getFilePlayerStream","player","Promise","resolve","reject","play","onplay","captureStream","recordUsingStream","onRecorderStop","chunks","recorder","MediaRecorder","start","ondataavailable","event","push","data","onstop","blob","Blob","console","log","audioDownload","URL","createObjectURL","anchorDownloadURL","type","replace","App","useState","selectedFilePlayers","setSelectedFilePlayers","micStream","setMicStream","recordingMeta","setRecordingMeta","recordData","useRef","selectedFilePlayerStreams","current","allStreams","filter","accept","onChange","file","target","files","fileSrcPath","Audio","controls","src","getFilePlayer","map","selectedFilePlayer","index","key","onClick","a","navigator","mediaDevices","getUserMedia","audio","video","audioMicStream","getAudioMicStream","length","filePlayerStream","mixedStream","recordedMeta","startRecording","stop","pause","recordingPlayer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d62e7d35.chunk.js","sourcesContent":["export const getMixedStream = (streams) => {\n  const audioContext = new AudioContext();\n  const destination = audioContext.createMediaStreamDestination();\n  streams.forEach(stream => {\n    const source = audioContext.createMediaStreamSource(stream);\n    source.connect(destination);\n  });\n\n  return destination.stream;\n}\n\nexport const getFilePlayer = (fileSrcPath) => {\n  const player = new Audio();\n  player.controls = \"controls\";\n  player.src = fileSrcPath;\n\n  return player\n}\n\nexport const getFilePlayerStream = (player) => {\n  return new Promise((resolve, reject) => {\n    player.play();\n    player.onplay = function () {\n      const stream = player.captureStream();\n      resolve(stream)\n    }\n  })\n\n  // player.onended = function (e) {\n      //   URL.revokeObjectURL(this.src);\n      // }\n  \n}\n\nexport const getMicStream = () => {\n  const constraints = {\n    audio: true,\n    video: false\n  }\n  return navigator.mediaDevices.getUserMedia(constraints);\n}\n\n\nexport const recordUsingStream = ({\n  stream,\n  onRecorderStop\n}) => {\n  const chunks = []\n  const recorder = new MediaRecorder(stream);\n  recorder.start(0);\n  recorder.ondataavailable = function (event) {\n    chunks.push(event.data);\n  };\n\n\n  recorder.onstop = function (event) {\n    const blob = new Blob(chunks, {\n      \"type\": \"audio/ogg; codecs=opus\"\n    });\n    console.log(\"recording complete\");\n    const audioDownload = URL.createObjectURL(blob);\n    const anchorDownloadURL = blob.type.replace(/.+\\/|;.+/g, \"\")\n\n    onRecorderStop({\n      audioDownload,\n      anchorDownloadURL\n    })\n  };\n\n  return recorder\n}\n\nexport const awaitForSeconds = (awaitSeconds = 2) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {resolve()}, awaitForSeconds*1000)\n  })\n}","import React, {useState, useRef} from 'react';\nimport './App.css';\n\nimport {\n  getFilePlayer,\n  getMicStream,\n  getFilePlayerStream,\n  \n  getMixedStream,\n  recordUsingStream\n} from './Utils/Utils'\n\n\nconst App = () => {\n  \n  const [selectedFilePlayers, setSelectedFilePlayers] = useState([])\n  const [micStream, setMicStream] = useState(null)\n  const [recordingMeta, setRecordingMeta] = useState({})\n  \n  const recordData = useRef({\n    recorder: null,\n    selectedFilePlayerStreams: []\n  }).current\n\n  const allStreams = [...recordData.selectedFilePlayerStreams, micStream].filter(stream => !!stream)\n\n  \n\n  const handleFilesSelection = (event) => {\n    const file = event.target.files[0];\n    const player = getFilePlayer(URL.createObjectURL(file))\n    setSelectedFilePlayers([...selectedFilePlayers, player])\n  }\n\n  const handleMicStream = () => {\n    const getAudioMicStream = async () => {\n      const audioMicStream =  await getMicStream()\n      setMicStream(audioMicStream)\n    }\n\n    getAudioMicStream()\n    \n  }\n\n  const handleRecording = () => {\n    const startRecording = async () => {\n      for (let selectedFilePlayer of selectedFilePlayers) {\n        const filePlayerStream = await getFilePlayerStream(selectedFilePlayer)\n        recordData.selectedFilePlayerStreams.push(filePlayerStream)\n      }\n    \n      const allStreams = [...recordData.selectedFilePlayerStreams, micStream].filter(stream => !!stream)\n      \n      if (!allStreams.length) {\n        return\n      }\n      const mixedStream = getMixedStream(allStreams)\n\n      recordData.recorder = recordUsingStream({\n        stream: mixedStream,\n        onRecorderStop: (recordedMeta) => {\n          setRecordingMeta(recordedMeta)\n        }\n      })\n    }\n\n    startRecording()\n  }\n\n  const handleStopRecording = () => {\n    if(recordData.recorder ) {\n      recordData.recorder.stop()\n      //setSelectedFilePlayers([])\n      selectedFilePlayers.forEach(player => player.pause())\n    }\n  }\n\n  const handlePlayingRecordedAudio = () => {\n    const recordingPlayer = new Audio();\n    recordingPlayer.src = recordingMeta.audioDownload;\n    recordingPlayer.play()\n  }\n\n\n\n  return <div>\n\n  <input type=\"file\" \n  //name=\"files[]\" \n  accept=\"audio/*\" \n  //multiple \n  onChange={handleFilesSelection} />\n\n  <div>\n    <p>Selected Players</p>\n    <ul>\n      {selectedFilePlayers.map((selectedFilePlayer, index) => {\n        return <li key={index}>{index}</li>\n      })}\n    </ul>\n  </div>\n\n  <div>\n    Is Mic Available {micStream? 'Yes': 'No'}\n  </div>\n\n\n  <button type=\"button\" onClick={handleMicStream} >Get Mic Available</button>\n\n  {(allStreams.length > 0 || selectedFilePlayers.length > 0) &&\n  <>\n   <button type=\"button\" onClick={handleRecording} >Start</button>\n\n   <button type=\"button\" onClick={handleStopRecording} >Stop</button>\n  </>\n  }\n\n  {recordingMeta.audioDownload && \n  <button type=\"button\" onClick={handlePlayingRecordedAudio} >\n  Play Recorded</button>}\n\n\n  </div>\n}\n\n\n  \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//serviceWorker.unregister();\n"],"sourceRoot":""}